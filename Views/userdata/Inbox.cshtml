@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Index";
    Layout = "userLayout";
}
@using System.Security.Claims;
@model online_sms.Models.Message;


<div class="main-container" id="container">

    <!-- partial:index.partial.html -->
    <div class="container-fluid clearfix">
        <div class="row" style="padding: 20px;">
        <div class="col-md-4" >

        <div class="people-list" id="people-list">
            <div class="search">
                <input type="text" placeholder="search" />
                <i class="fa fa-search"></i>
            </div>
                    <div id="userList">
                     
                    </div>


        </div>
        </div>
            <div class="col-md-8">
                
                <div class=" align-items-center justify-content-center h-100" id="select_user" style="display:flex;" >
                    <div>
                        <h1 class="text-white text-center fw-bold" >Select User</h1>
                    </div>
                </div>

        <div class="chat" style="display:none;" >
            <div class="chat-header clearfix">
                <img src="" width="50px" height="50px" style="border-radius:50%;"  id="userInb" alt="avatar" />

                <div class="chat-about">
                            <div class="chat-with  user_name">Chat with Vincent Porter</div>
                    <div class="chat-num-messages">already 1 902 messages</div>
                </div>
                <i class="fa fa-star"></i>
            </div> <!-- end chat-header -->

         
                            <div class="chat-history" id="chat-history">
                              
                                <ul>
                                
                                </ul>

                                   
                                
                            </div>


                    <form id="message-form" asp-action="Inbox" method="post">
                        @Html.AntiForgeryToken()
                        <div class="chat-message clearfix">
                            @if (User.Identity.IsAuthenticated)
                            {
                                <input type="hidden" id="receiver-user-id" name="ReceiverUserId"  />
                                <input type="hidden" name="SenderUserId" id="senderU_ID" value="@User.FindFirst(ClaimTypes.Sid)?.Value" />
                            }
                            <textarea id="MessageText" name="MessageText" placeholder="Type your message" rows="3"></textarea>

                            <i class="fa fa-file-o"></i> &nbsp;&nbsp;&nbsp;
                            <i class="fa fa-file-image-o"></i>

                            <button type="submit">Send</button>
                        </div>
                    </form>




        </div> <!-- end chat -->
        </div>
        </div>
    </div> <!-- end container -->

    <script id="message-template" type="text/x-handlebars-template">
        <li class="clearfix">
          <div class="message-data align-right">
            <span class="message-data-time" >{{time}}, Today</span> &nbsp; &nbsp;
            <span class="message-data-name" >Olia</span> <i class="fa fa-circle me"></i>
          </div>
          <div class="message other-message float-right">
            {{messageOutput}}
          </div>
        </li>
    </script>

    <script id="message-response-template" type="text/x-handlebars-template">
        <li>
          <div class="message-data">
            <span class="message-data-name"><i class="fa fa-circle online"></i> Vincent</span>
            <span class="message-data-time">{{time}}, Today</span>
          </div>
          <div class="message my-message">
            {{response}}
          </div>
        </li>
    </script>

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>


<script>

    $(document).ready(function () {
        function filterUsers() {
            var query = $('.search input').val().toLowerCase();
            var resultsFound = false;

            $('#userList .list-group .userClick').each(function () {
                var username = $(this).find('.name').text().toLowerCase();
                if (username.includes(query)) {
                    $(this).show();
                    resultsFound = true;
                } else {
                    $(this).hide();
                }
            });

            // Show or hide the "No users found" message
            if (resultsFound) {
                $('.no-results').hide();
            } else {
                $('.no-results').show();
            }
        }

        $('.search input').on('keyup', filterUsers);
    });


    function ChatRoom(uid, username,img) {
        alert("test");

        $(".user_name").text(username);
        $(".chat").show();
        $("#select_user").hide();
        if (img) {
            $("#userInb").attr("src", img);
        } else {
            $("#userInb").attr("src", '@Url.Content("~/assets/img/person.png")');
        }


        $("#receiver-user-id").val(uid);

        $.ajax({
            url: '@Url.Action("GetMessages", "userdata")', // Replace with your controller name
            type: 'GET',
            data: { receiverId: uid }, // Correctly use 'uid' instead of 'receiverId'
            success: function (response) {
                if (response.success) {
                    var chatHistory = $('#chat-history ul');
                    chatHistory.empty(); // Clear existing messages
                    console.log(response);
                    // Iterate over messages and append them
                    response.messages.forEach(function (message) {
                        var messageItem = '';
                        var messageTime = new Date(message.sentAt).toLocaleTimeString(); // Format time as needed
                        var messageName = message.senderUserId === uid ? username : 'You'; // Example names
                        var messageClass = message.senderUserId === uid ? 'my-message' : 'other-message';
                        var alignClass = message.senderUserId === uid ? '' : 'align-right';

                        messageItem = `
                            <li class="clearfix">
                                <div class="message-data ${alignClass}">
                                    <span class="message-data-time">${messageTime}</span> &nbsp; &nbsp;
                                    <span class="message-data-name">${messageName}</span>
                                    <i class="fa fa-circle ${message.senderUserId === uid ? 'me' : 'online'}"></i>
                                </div>
                                <div class="message ${messageClass} float-${message.senderUserId === uid ? 'right' : 'left'}">
                                    ${message.messageText}
                                </div>
                            </li>
                        `;

                        chatHistory.append(messageItem);
                    });
                } else {
                    console.log('Failed to retrieve messages.');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }


    $(document).ready(function () {
    
       
        $('#message-form').submit(function (e) {
            e.preventDefault(); // Prevent the default form submission

            var form = $(this);
            var formData = new FormData(form[0]);

            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        var receiverId = $("#receiver-id").val();
                        $("#MessageText").val("")
                        // Reload messages for the current conversation
                        // $.ajax({
                        //     url: '@Url.Action("GetMessages", "userdata")', // Replace with your controller name
                        //     type: 'GET',
                        //     data: { receiverId: receiverId },
                        //     success: function (response) {
                        //         if (response.success) {
                        //             var chatHistory = $('#chat-history ul');
                        //             chatHistory.empty(); // Clear existing messages

                        //             // Iterate over messages and append them
                        //             response.messages.forEach(function (message) {
                        //                 var messageItem = '';
                        //                 var messageTime = new Date(message.sentAt).toLocaleTimeString(); // Format time as needed
                        //                 var messageName = message.senderUserId === receiverId ? 'You' : 'Other'; // Example names
                        //                 var messageClass = message.senderUserId === receiverId ? 'my-message' : 'other-message';
                        //                 var alignClass = message.senderUserId === receiverId ? '' : 'align-right';

                        //                 messageItem = `
                        //                     <li class="clearfix">
                        //                         <div class="message-data ${alignClass}">
                        //                             <span class="message-data-time">${messageTime}</span> &nbsp; &nbsp;
                        //                             <span class="message-data-name">${messageName}</span>
                        //                             <i class="fa fa-circle ${message.senderUserId === receiverId ? 'me' : 'online'}"></i>
                        //                         </div>
                        //                         <div class="message ${messageClass} float-${message.senderUserId === receiverId ? 'right' : 'left'}">
                        //                             ${message.messageText}
                        //                         </div>
                        //                     </li>
                        //                 `;

                        //                 chatHistory.append(messageItem);
                        //             });
                        //         } else {
                        //             console.log('Failed to retrieve messages.');
                        //         }
                        //     },
                        //     error: function (xhr, status, error) {
                        //         console.error('Error:', error);
                        //     }
                        // });
                    } else {
                        console.log('Failed to send message.');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                }
            });
        });
   
    
    });


    function fetchMesg() {
        var receiverId = $("#receiver-user-id").val();
        var username = $(".user_name").text();
        console.log(username, receiverId, "testId");
        $.ajax({
            url: '@Url.Action("GetMessages", "userdata")', // Replace with your controller name
            type: 'GET',
            data: { receiverId: receiverId },
            success: function (response) {
                if (response.success) {
                    var chatHistory = $('#chat-history ul');
                    chatHistory.empty(); // Clear existing messages
                    console.log(response)
                    // Iterate over messages and append them
                    response.messages.forEach(function (message) {
                        console.log(message, message.receiverUserId, receiverId, "recieverId")
                        var messageItem = '';
                        var messageTime = new Date(message.sentAt).toLocaleTimeString(); // Format time as needed
                        var messageName = message.receiverUserId == receiverId ? 'You' : username; // Example names
                        var messageClass = message.receiverUserId == receiverId ? 'other-message' : 'my-message';
                        var alignClass = message.receiverUserId == receiverId ? 'align-right' : '';

                        messageItem = `
                                        <li class="clearfix">
                                            <div class="message-data ${alignClass}">
                                                <span class="message-data-time">${messageTime}</span> &nbsp; &nbsp;
                                                <span class="message-data-name">${messageName}</span>
                                                        <i class="fa fa-circle ${message.receiverUserId === receiverId ? 'me' : 'online'}"></i>
                                            </div>
                                                    <div class="message ${messageClass} float-${message.receiverUserId === receiverId ? 'right' : 'left'}">
                                                ${message.messageText}
                                            </div>
                                        </li>
                                    `;

                        chatHistory.append(messageItem);
                    });
                } else {
                    console.log('Failed to retrieve messages.');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }

    function fetchFriend() {
        $.ajax({
            url: '/userdata/GetFriends',
            type: 'GET',
            success: function (data) {
                $('#userList').html(data); // Load the returned partial view into the #getFrnd div
            },
            error: function () {
                alert('Failed to load friend requests.');
            }
        });
    }
    fetchFriend();
    setInterval(() => {
   
        fetchMesg();
    }, 2000)
        

</script>

